// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id                      String   @id
  name                    String   @unique
  contactNumber           String?  
  address                 String? 
  contactEmail            String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  users                   User[]
  fingerprints                Fingerprint[]
  ingredients                 Ingredient[]
  payrolls                    Payroll[]
  meals                       Meal[]
  salaryAdjustments           SalaryAdjustments[]
  individualSalaryAdjustments IndividualSalaryAdjustments[]
  orders                      Order[]
  payeTaxSlabs                PayeTaxSlab[]
  mealTypes                   MealType[]
  ScheduledMeals             ScheduledMeal[]
}

model Fingerprint {
  thumbid String @id
  orgId   String
  empId   String
  org      Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id
  empNo          String
  name           String
  role           String
  dob            String?
  telephone      String?
  gender         Gender
  address        String?
  email          String        @unique
  salary         Int?
  passkey        Int?
  supId          String?
  language       String?
  height         Int?
  weight         Int?
  payrolls       Payroll[]
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  permissions    Permission[]
  userPermissions UserPermission[]
  createdAt      DateTime      @default(now())
  individualSalaryAdjustments IndividualSalaryAdjustments[] 
  @@unique([empNo, organizationId])
}

enum Gender {
  Male
  Female
  Other
}

// Permission model
model Permission {
  id        String   @id @default(uuid())
  orgId     String
  action    String
  role      String
  users     User[] // For direct user permissions
  userPermissions UserPermission[]
  createdAt DateTime @default(now())
}

model UserPermission {
  id           Int         @id @default(autoincrement())
  userId       String
  permissionId String
  user         User        @relation(fields: [userId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}


model Ingredient {
  id             Int              @id @default(autoincrement())
  orgId          String        
  name           String
  createdAt      DateTime         @default(now())
  usedInMeals    MealIngredient[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}


model Payroll {
  id         Int        @id @default(autoincrement())
  orgId      String
  empId      String
  employee   User       @relation(fields: [empId], references: [id], onDelete: Cascade)
  range      DateTime[]
  month      String
  netPay     Float
  payrollPdf String
  createdAt  DateTime   @default(now())
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  @@unique([id, month])
}

model Meal {
  id          Int              @id @default(autoincrement())
  orgId       String
  nameEnglish String
  nameSinhala String
  nameTamil   String
  description String?
  isDeleted Boolean  @default(false)
  price       Float
  imageUrl    String?
  category    String[]
  createdAt   DateTime         @default(now())
  ingredients MealIngredient[]
  schedules   ScheduledMeal[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model MealIngredient {
  id           Int        @id @default(autoincrement())
  meal         Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId       Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
}

model SalaryAdjustments {
  id           Int     @id @default(autoincrement())
  orgId        String
  label        String
  isPercentage Boolean //Percentage or Value
  allowance    Boolean //Allowance or Deduction
  amount       Float?
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model IndividualSalaryAdjustments {
  id           Int     @id @default(autoincrement())
  empId        String
  orgId        String
  label        String
  isPercentage Boolean
  allowance    Boolean
  amount       Float
  employee User @relation(fields: [empId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Order {
  id              Int      @id @default(autoincrement())
  employeeId      String
  orgId           String
  mealTypeId      Int
  meals           String[] // Array of meal IDs
  orderDate       DateTime @db.Date
  orderPlacedTime DateTime @default(now()) // Store the exact time the order was placed in Sri Lankan time zone
  price           Float
  serve           Boolean  @default(false)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model ScheduledMeal {
  id         Int      @id @default(autoincrement())
  orgId      String
  date       DateTime @db.Date
  mealTypeId Int
  mealType   MealType @relation(fields: [mealTypeId], references: [id], onDelete: Cascade)
  meals      Meal[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([date, mealTypeId])
}

model PayeTaxSlab {
  id         Int    @id @default(autoincrement())
  orgId      String
  orderId    Int
  lowerLimit Float
  upperLimit Float?
  taxRate    Float
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  @@unique([orgId,orderId])
}

model MealType {
  id        Int             @id @default(autoincrement())
  name      String // "Breakfast", "Lunch", "Dinner", or custom names
  orgId     String
  time      String[] // Optional time in HH:MM format
  isDefault Boolean         @default(false) // To mark system defaults
  isDeleted Boolean  @default(false)
  schedules ScheduledMeal[]
  date      DateTime
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}
