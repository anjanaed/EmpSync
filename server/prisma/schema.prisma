// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String       @id
  name       String       
  role       String
  dob        String?
  telephone  String?
  gender     String?
  address    String?
  email      String       @unique
  password   String
  salary     Int?
  thumbId    Bytes?       @unique
  supId      String?
  language   String?
  height     Int?
  weight     Int?
  payrolls   Payroll[]
  attendance Attendance[]
  createdAt  DateTime     @default(now())
}

model Ingredient {
  id              Int      @id @default(autoincrement())
  name            String 
  price_per_unit  Decimal @db.Decimal(10, 2)
  quantity        Decimal @db.Decimal(10, 2)
  type            String
  priority        Int
  createdAt       DateTime @default(now())
}

model IngredientOrder {
  id                  String      @id @default(uuid())
  lastUpdated         DateTime    @default(now())
  budget              Float?     
  priority1Budget     Float?      
  otherPriorityBudget Float?      
  totalCost           Float?      
  ingredients         OrderIngredient[]
}


model OrderIngredient {
  id            String          @id @default(uuid())
  ingredientId  Int?          
  name          String
  price_per_unit Float
  quantity      Int
  type          String
  priority      Int
  totalCost     Float
  createdAt     DateTime       @default(now())
  order         IngredientOrder @relation(fields: [orderId], references: [id])
  orderId       String
}

model Budget {
  id Int @id @default(autoincrement())
  budgetDate DateTime @default(now())
  budgetAmount Float
}

model Payroll {
  id         Int   @id @default(autoincrement())
  empId      String
  employee   User     @relation(fields: [empId], references: [id],onDelete: Cascade)
  range DateTime[]
  month      String
  netPay Float
  payrollPdf String
  createdAt  DateTime @default(now())
}

model Meal {
  id           String    @id @unique
  nameEnglish  String
  nameSinhala  String
  nameTamil    String
  description  String?
  price        Float
  imageUrl     String?
  ingredients  String[]
  category     String[]
  createdAt    DateTime  @default(now())
}

model SalaryAdjustments {
  id           Int     @id @default(autoincrement())
  label        String
  isPercentage Boolean //Percentage or Value
  allowance    Boolean //Allowance or Deduction
  amount Float?
}


model IndividualSalaryAdjustments{
  id Int @id @default(autoincrement())
  empId String
  label String
  isPercentage Boolean
  allowance Boolean
  amount Float
}

model Order {
  id              Int      @id @default(autoincrement())
  employeeId      String
  meals           String[] // Array of meal IDs
  orderDate       DateTime @default(now()) @db.Date // Store only the date
  orderPlacedTime DateTime @default(now()) @db.Timestamptz // Store the exact time the order was placed in Sri Lankan time zone
  breakfast       Boolean  @default(false)
  lunch           Boolean  @default(false)
  dinner          Boolean  @default(false)
  price           Float
  serve           Boolean  @default(false)
}

model Attendance {
  id       String   @id
  empId    String
  employee User     @relation(fields: [empId], references: [id])
  dateTime DateTime
  status   String
}

model LeaveApplication {
  id          Int      @id @default(autoincrement())
  appliedDate DateTime @default(now())
  duration    Float
  empId       String
  reason      String
  status      Boolean  @default(false)
  reviewedBy  String
}

model ScheduledMeal {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique @db.Date // Store as DATE (without time)
  breakfast String[]
  lunch     String[]
  dinner    String[]
  confirmed Boolean  @default(false) 
  createdAt DateTime @default(now())
}

model PayeTaxSlab{
  id Int @id @default(autoincrement())
  orderId Int
  lowerLimit Float
  upperLimit Float?
  taxRate Float
}

model Reports{
  id Int @id @default(autoincrement())
  name String
  requestStatus Boolean
  link String

}
